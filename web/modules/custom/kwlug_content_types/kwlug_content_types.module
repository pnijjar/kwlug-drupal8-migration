<?php 

/***
 * Validate archive.org URLs and download the file sizes.
 */
function kwlug_content_types_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  if (($form_id == 'node_podcast_form') || 
      ($form_id == 'node_podcast_edit_form')) { 

    // \Drupal::logger('add_podcast')->notice('In podcast edit form');

    
    $form['#validate'][] = 'kwlug_content_types_podcast_node_validate';
    $form['#submit'][] = 'kwlug_content_types_podcast_node_submit';

    // Insert before the ::save

    $actions = array(
        'submit' => 'submit', 
        'publish' => 'publish',
        );
    foreach ($actions as $a) { 
        array_unshift($form['actions'][$a]['#submit'], 
            'kwlug_content_types_podcast_node_submit');

    } 

    // $form['actions']['submit']['#submit'][] = 'kwlug_content_types_podcast_node_submit';

    //dpm($form);
    // dpm($form_state);

  } // end if 

} // end hook_form_alter



/** 
 * Make sure that the podcast entries are from archive.org
 */

function kwlug_content_types_podcast_node_validate ($form, 
    \Drupal\Core\Form\FormStateInterface &$form_state) {

  // $form_state['values'][$podcast_field][0]['value']

  $filetypes = array ( 
    'mp3' => 'podcast_mp3',
    'ogg' => 'podcast_ogg',
    'flac' => 'podcast_flac',
  );

  $archive_org_id = $form_state->getValue(array('field_archive_org_id', 0, 'value'));

  $archive_regexp = '@^https://archive.org/download/' 
    . $archive_org_id
    . '@';


  foreach ($filetypes as $f => $ffield ) {

    $podcast_field = 'field_podcast_' . $f;
    $podcast_field_value = $form_state->getValue(array($podcast_field, 0, 'value'));


    if (!preg_match($archive_regexp, $podcast_field_value)) { 

      $form_state->setErrorByName($podcast_field, 'This does not look like the correct'
        . ' archive.org URL! Is this wrong or is the ArchiveID wrong?' );

    } 

    $type_regexp = '@\.' . $f . '$@';
    if (!preg_match($type_regexp, $podcast_field_value)) { 
      $form_state->setErrorByName($podcast_field, 'Incorrect filetype: expected ' .$f);
    }

  } // end foreach


} // end kwlug_content_types_podcast_node_validate

/**  
 * Populate podcast length fields on submission
 */
function kwlug_content_types_podcast_node_submit ($form, 
    \Drupal\Core\Form\FormStateInterface &$form_state) { 


  // The values are dummy ones here
  $filetypes = array (
    'mp3' => 'podcast_mp3',
    'ogg' => 'podcast_ogg',
    'flac' => 'podcast_flac',
  );

  // Initialize the stream to pick up headers
  // From: http://php.net/manual/en/function.get-headers.php

  stream_context_set_default(
    array(
      'http' => array(
        'method' => 'HEAD'
      )
    )
  );

  // Loop through each file type
  foreach ($filetypes as $f => $ffield ) {

    $podcast_field = 'field_podcast_' . $f;

    $podcast_url = $form_state->getValue(array($podcast_field, 0, 'value'));
    // We should also check that this is an archive.org URL
    if (!empty($podcast_url)) {


      // http://stackoverflow.com/questions/21677579

      $curl_options = array(
           CURLOPT_RETURNTRANSFER => true,     // return web page
           CURLOPT_HEADER         => true,     //return headers in addit
           CURLOPT_NOBODY         => true,     // Do not return actual content
           CURLOPT_FOLLOWLOCATION => true,     // follow redirects
           CURLOPT_ENCODING       => "",       // handle all encodings
           CURLOPT_AUTOREFERER    => true,     // set referer on redirec
           CURLOPT_CONNECTTIMEOUT => 120,      // timeout on connect
           CURLOPT_TIMEOUT        => 120,      // timeout on response
           CURLOPT_MAXREDIRS      => 10,       // stop after 10 redirect
           CURLOPT_SSL_VERIFYPEER => true,     // Disabled SSL Cert che
      );

      $ch = curl_init($podcast_url);
      curl_setopt_array($ch, $curl_options);

      // This does the call 
      $rough_content = curl_exec($ch);

      // These are curl headers
      $curl_header = curl_getinfo($ch);

      $errmsg = curl_error($ch);
      $errno = curl_errno($ch);
      curl_close($ch);

      $request_header = substr($rough_content,0,$curl_header['header_size']);


      // Ugh. Find the last length using a regex. 
      $needle = "/Content-Length: (\d+)/";
      preg_match_all($needle, $request_header, $matches);

      // matches[1] is the lengths (\d+).
      $enc_length = $matches[1];

      if (is_array($enc_length)) {
         $podcast_length = end($enc_length);
      } else {
         $podcast_length = $enc_length;
      }

      $length_field = 'field_' . $f . '_length';

      $form_state->setValue($length_field, array(array('value'=>$podcast_length)));


    } // end if podcast field not empty

  } // end of each type


  /*  
    print '<pre>';
    print_r($form_state);
    print '</pre>';
  */
      
}  // end kwlug_content_types_podcast_node_submit
